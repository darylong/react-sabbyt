{"version":3,"sources":["logo.svg","components/CustomButton.js","components/CustomModal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CustomButton","_this","this","react_default","a","createElement","Button","onClick","props","style","width","margin","variant","title","React","PureComponent","defaultProps","CustomModal","Modal","Object","assign","backgroundColor","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Footer","onHide","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","modalVisible","setState","_this2","className","src","logo","alt","href","target","rel","components_CustomButton","openModal","components_CustomModal","show","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4QCGlCC,mLAEK,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,QAAS,WAAQN,EAAKO,MAAMD,WAC5BE,MAAO,CAACC,MAAO,IAAKC,OAAQ,IAC5BC,QAASV,KAAKM,MAAMI,SACnBV,KAAKM,MAAMK,cARGC,IAAMC,eAcjCf,EAAagB,aAAe,CAC1BJ,QAAS,UACTC,MAAO,SACPN,QAAS,kBAAO,IAIHP,gBCpBTiB,mLAEA,OACEd,EAAAC,EAAAC,cAACa,EAAA,EAADC,OAAAC,OAAA,CACEX,MAAOP,KAAKM,MAAMK,OAAS,CAAEQ,gBAAiBnB,KAAKM,MAAMK,QACrDX,KAAKM,MAFX,CAGEc,KAAK,KACLC,kBAAgB,gCAChBC,UAAQ,IAERrB,EAAAC,EAAAC,cAACa,EAAA,EAAMO,OAAP,CAAcC,aAAW,GACvBvB,EAAAC,EAAAC,cAACa,EAAA,EAAMS,MAAP,CAAaC,GAAG,iCACb1B,KAAKM,MAAMK,QAGhBV,EAAAC,EAAAC,cAACa,EAAA,EAAMW,KAAP,KACE1B,EAAAC,EAAAC,cAAA,0LAMFF,EAAAC,EAAAC,cAACa,EAAA,EAAMY,OAAP,KACE3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAASL,KAAKM,MAAMuB,QAA5B,kBAvBcjB,IAAMC,eA8B9BE,EAAYD,aAAe,CACvBH,MAAO,uBAGII,QC0BFe,cAvDb,SAAAA,EAAaxB,GAAO,IAAAP,EAAA,OAAAkB,OAAAc,EAAA,EAAAd,CAAAjB,KAAA8B,IAClB/B,EAAAkB,OAAAe,EAAA,EAAAf,CAAAjB,KAAAiB,OAAAgB,EAAA,EAAAhB,CAAAa,GAAAI,KAAAlC,KAAMM,KAED6B,MAAQ,CACXC,cAAc,EACdzB,MAAO,IALSZ,yEASTY,GACTX,KAAKqC,SAAS,CAAED,cAAc,EAAMzB,2CAG5B,IAAA2B,EAAAtC,KACR,OACEC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,OACbtC,EAAAC,EAAAC,cAAA,UAAQoC,UAAU,cAChBtC,EAAAC,EAAAC,cAAA,OAAKqC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCzC,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEoC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,2BASA5C,EAAAC,EAAAC,cAAC2C,EAAD,CACEnC,MAAO,OACPD,QAAS,UACTL,QAAS,WAAQiC,EAAKS,UAAU,WAGlC9C,EAAAC,EAAAC,cAAC2C,EAAD,CACEnC,MAAO,MACPD,QAAS,SACTL,QAAS,WAAQiC,EAAKS,UAAU,UAGlC9C,EAAAC,EAAAC,cAAC6C,EAAD,CACIrC,MAAOX,KAAKmC,MAAMxB,MAClBsC,KAAMjD,KAAKmC,MAAMC,aACjBP,OAAQ,WAAQS,EAAKD,SAAS,CAAED,cAAc,gBA/C1CxB,IAAMC,eCKJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d85777c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nclass CustomButton extends React.PureComponent {\n\n  render() {\n      return (\n          <Button\n            onClick={() => { this.props.onClick() }}\n            style={{width: 200, margin: 10}}\n            variant={this.props.variant}>\n            {this.props.title}\n          </Button>\n      )\n  }\n}\n\nCustomButton.defaultProps = {\n  variant: 'primary',\n  title: 'Button',\n  onClick: () => -1\n};\n\n\nexport default CustomButton","import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\n\nclass CustomModal extends React.PureComponent {\n    render() {\n      return (\n        <Modal\n          style={this.props.title && { backgroundColor: this.props.title }}\n          {...this.props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              {this.props.title}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>            \n            <p>\n              Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\n              dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta\n              ac consectetur ac, vestibulum at eros.\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={this.props.onHide}>Close</Button>\n          </Modal.Footer>\n        </Modal>\n      );\n    }\n  }\n\n  CustomModal.defaultProps = {\n      title: 'Default Modal Title'\n  }\n\n  export default CustomModal","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CustomButton from './components/CustomButton'\nimport CustomModal from './components/CustomModal'\n\nclass App extends React.PureComponent {\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      modalVisible: false,\n      title: ''\n    }\n  }\n\n  openModal (title) {\n    this.setState({ modalVisible: true, title })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React with Sabbyt\n          </a>\n  \n          <CustomButton \n            title={'Blue'}\n            variant={'primary'}     \n            onClick={() => { this.openModal('Blue') }}       \n          />\n  \n          <CustomButton \n            title={'Red'}\n            variant={'danger'}\n            onClick={() => { this.openModal('Red') }}\n          />\n  \n          <CustomModal\n              title={this.state.title}\n              show={this.state.modalVisible}              \n              onHide={() => { this.setState({ modalVisible: false })}}\n            />\n  \n          \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}